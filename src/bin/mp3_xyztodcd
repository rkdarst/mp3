#!/usr/bin/env python

import sys
import re
import os
import mp3


def main():
    from optparse import OptionParser
    parser = OptionParser(usage="%prog [options] INPUT [ ... ] OUTPUT")
    #parser.add_option("--quiet", "-q", action='count', dest='quietness',
    #                  help="Less information (incremental)", default=0)
    #parser.add_option("--verbose", "-v", action='count', dest='verbosity',
    #                  help="More information (incremental)", default=0)
    #parser.add_option("--", "-", action='', dest='',
    #                  help="")
    parser.add_option("--arc", "-a", action='store_true', dest='arc_format',
                      default=False,
                      help="Input is a single tinker .arc file")
    parser.add_option("--filter", "-F", action='store_true', dest='filter_extension',
                      default=False,
                      help= r"Only allow files of the form ^.*\.\d{3,}$")
    parser.add_option("--remove", "-R", action='store_true', dest='remove_inputs',
                      default=False,
                      help="Remove the input files (useful with -F)")
    parser.add_option("--list", "-l", action='store_true', dest='list_inputs',
                      default=False,
                      help="Just list the inputs, don't do anything")
    parser.add_option("--glob", "-g", action='store_true', dest='glob',
                      default=False,
                      help="Glob using the indicated regex")
    parser.add_option("--dry-run", "-n", action='store_true', dest='dry_run',
                      default=False,
                      help="Don't actually write anything.")

    (options, args) = parser.parse_args()
    
    dcd = args[-1]

    # just for now, verify that the output has the right extension.
    # this should help prevent cases where you forget to add the
    # dcd and it would otherwise overwrite the last xyz file.

    xyzs = args[:-1]
    # Decide if we need to filter our input to match ^.*\.\d{3}$
    if options.filter_extension == True:
        pattern = re.compile("\.\d{3,}$")
        before = len(xyzs)
        xyzs = [ x for x in xyzs if pattern.search(x) is not None ]
        after = len(xyzs)
        info("Filtering by extension \.\d{3,}$ reduced inputs from %s to %s"%(before, after))
        mp3.functions.filename_regex["tinkerxyz"] = re.compile(r'\.(\d\d\d+)$')

    if options.glob == True:
        # This will take the directory + fileprefix from xyzs[1], glob
        # for it in the given directories, and sort it by number.
        #
        #
        dir_ = os.path.dirname(xyzs[0])
        name = os.path.basename(xyzs[0])
        if dir_ == "":
            newdir = "."
        else:
            newdir = dir_

        dirlist = os.listdir(newdir)
        matchfile = name + "\.(\d{3,})$"
        matchfilere = re.compile(matchfile)
        print "matching files matching", matchfile
        
        dirlist = [ name for name in dirlist if matchfilere.search(name) is not None ]
        dirlist = [ os.path.join(dir_, name) for name in dirlist ]
        sortlist = [ (int(matchfilere.search(name).group(1)), name ) for name in dirlist ] 
        sortlist.sort()

        xyzs = dirlist
        mp3.functions.filename_regex["tinkerxyz"] = re.compile(r'\.(\d\d\d+)$')

        
    # This option is for when you just want it to list what it would use,
    # after it has been filtered as per above.  This is useful for when
    # you want to use the output in a shell process substitution.
    if options.list_inputs == True:
        print " ".join( xyzs )
        sys.exit()

    if dcd[-4:] != ".dcd":
        warn( "\n".join(["The DCD file does not have the .dcd extension.",
                         "To prevent mistakes, that extension is required."] ))
        sys.exit()

    if options.dry_run == True:
        sys.exit()

    if options.remove_inputs == True:
        really = raw_input("really remove all inputs (y/n)? [n]: ")
        if really[0] == "y" or really[0] == "Y":
            [ os.remove(x) for x in xyzs ]
            sys.exit()



    # This is included if you use the -F option!!
    # mp3.functions.filename_regex["tinkerxyz"] = re.compile(r'\.(\d\d\d+)$')

    cord = mp3.smartcord(xyzs)

    print "number of frames:", cord.nframes()
    print "number of atoms:", cord.natoms()
    print "cord set, beginning writing"
    cord.writedcd(dcd)
    print "done"



def warn(text):
    """Process warning information."""
    print text
def info(text):
    """Process informational information."""
    print text
def debug(text):
    """Process debug information."""
    print text


main()
